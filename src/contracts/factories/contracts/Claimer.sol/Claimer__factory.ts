import type { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers'

import type { PromiseOrValue } from '../../../common'
import type { Claimer, ClaimerInterface } from '../../../contracts/Claimer.sol/Claimer'

const _abi = [
  {
    inputs: [],
    name: 'claim',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'claimed',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_pass',
        type: 'address',
      },
    ],
    name: 'init',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pass',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'w',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b50610661806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c884ef8311610050578063c884ef83146100c8578063f09a4016146100fb578063fc0c546a1461010e57600080fd5b8063205c9cc7146100775780634e71d92d14610093578063a7a1ed721461009d575b600080fd5b61008060025481565b6040519081526020015b60405180910390f35b61009b610121565b005b6001546100b0906001600160a01b031681565b6040516001600160a01b03909116815260200161008a565b6100eb6100d636600461054e565b60036020526000908152604090205460ff1681565b604051901515815260200161008a565b61009b610109366004610570565b61030c565b6000546100b0906001600160a01b031681565b6000546001600160a01b031661017e5760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420496e697469616c697a6564000000000000000000000000000000000060448201526064015b60405180910390fd5b3360009081526003602052604090205460ff16156101de5760405162461bcd60e51b815260206004820152600f60248201527f416c726561647920436c61696d656400000000000000000000000000000000006044820152606401610175565b33600081815260036020526040808220805460ff191660019081179091559154600254925491516370a0823160e01b8152600481018590526001600160a01b039182169463a9059cbb949093909216906370a0823190602401602060405180830381865afa158015610254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027891906105a3565b61028291906105bc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156102e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030991906105e7565b50565b6000546001600160a01b0316156103655760405162461bcd60e51b815260206004820152601360248201527f416c726561647920496e697469616c697a6564000000000000000000000000006044820152606401610175565b600080546001600160a01b038481167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316811790935560018054918516919092161790556040516370a0823160e01b81523360048201526370a0823190602401602060405180830381865afa1580156103e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040891906105a3565b60028190556000546040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101929092526001600160a01b0316906323b872dd906064016020604051808303816000875af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a091906105e7565b50600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051891906105a3565b600260008282546105299190610609565b90915550505050565b80356001600160a01b038116811461054957600080fd5b919050565b60006020828403121561056057600080fd5b61056982610532565b9392505050565b6000806040838503121561058357600080fd5b61058c83610532565b915061059a60208401610532565b90509250929050565b6000602082840312156105b557600080fd5b5051919050565b80820281158282048414176105e157634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156105f957600080fd5b8151801515811461056957600080fd5b60008261062657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c39b9aa282353ad2cb2bfeee57c3aab2a7a0dc0c206dee85d44cf0f00688182d64736f6c63430008110033'

type ClaimerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: ClaimerConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Claimer__factory extends ContractFactory {
  constructor(...args: ClaimerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Claimer> {
    return super.deploy(overrides || {}) as Promise<Claimer>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): Claimer {
    return super.attach(address) as Claimer
  }
  override connect(signer: Signer): Claimer__factory {
    return super.connect(signer) as Claimer__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ClaimerInterface {
    return new utils.Interface(_abi) as ClaimerInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Claimer {
    return new Contract(address, _abi, signerOrProvider) as Claimer
  }
}
